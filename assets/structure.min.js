"use strict";

var _createClass = (function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
})();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Structure = (function() {
    function Structure() {
        var _ref =
                arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$wrapper = _ref.wrapper,
            wrapper = _ref$wrapper === undefined ? "body" : _ref$wrapper,
            _ref$structureDataUrl = _ref.structureDataUrl,
            structureDataUrl =
                _ref$structureDataUrl === undefined
                    ? "structure.json"
                    : _ref$structureDataUrl;

        _classCallCheck(this, Structure);

        this._parameters = { structureDataUrl: structureDataUrl };
        var _wrapperNode = (this._wrapperNode =
            wrapper instanceof HTMLElement
                ? wrapper
                : document.querySelector(wrapper));
        if (!_wrapperNode || !_wrapperNode.innerHTML)
            throw new Error("Wrapper " + wrapper + " not accessible");
        return this._updateStructureData()
            .then(this._prepareWrapper.bind(this))
            .then(
                function() {
                    window.addEventListener("resize", Structure.updateActiveItemPathes);
                    return this._renderStructure(
                        false,
                        this._getParameter("renderRules", "_root", "showDepth")
                    );
                }.bind(this)
            )
            .catch(function(error) {
                console.error(error);
                return false;
            }).result;
    }

    _createClass(
        Structure,
        [
            {
                key: "_updateStructureData",
                value: function _updateStructureData() {
                    var url =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : this._parameters.structureDataUrl;

                    return fetch(url)
                        .then(function(response) {
                            return response.json();
                        })
                        .then(
                            function(response) {
                                if (!response || !response.structure)
                                    throw new Error("Structure data empty");
                                if (response.parameters)
                                    Object.assign(
                                        this._parameters,
                                        response.parameters,
                                        this._parameters
                                    );
                                return this._parseStructureData(response.structure);
                            }.bind(this)
                        );
                }
            },
            {
                key: "_parseStructureData",
                value: function _parseStructureData() {
                    var structure =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : {};

                    this._structure = structure;
                    this._structureItems = [];
                    this._structureItems.push({
                        id: 0,
                        type: "root",
                        level: -1,
                        submissive: this._structure
                    }); // TODO: change root level to 0 (zero)
                    this._parseItemData(this._structureItems[0]);
                    return true;
                }
            },
            {
                key: "_parseItemData",
                value: function _parseItemData(parentItem) {
                    if (parentItem.partners)
                        for (var i in parentItem.partners) {
                            var itemData = parentItem.partners[i];
                            itemData.parentItem = parentItem;
                            itemData.id = this._structureItems.length;
                            itemData.level = parentItem.level;
                            this._structureItems[itemData.id] = itemData;
                            this._parseItemData(itemData);
                        }
                    if (parentItem.assistants)
                        for (var _i in parentItem.assistants) {
                            var _itemData = parentItem.assistants[_i];
                            _itemData.parentItem = parentItem;
                            _itemData.id = this._structureItems.length;
                            _itemData.level = parentItem.level;
                            this._structureItems[_itemData.id] = _itemData;
                            this._parseItemData(_itemData);
                        }
                    var childLevel = parentItem.level + 1;
                    if (parentItem.submissive)
                        for (var _i2 in parentItem.submissive) {
                            var _itemData2 = parentItem.submissive[_i2];
                            _itemData2.parentItem = parentItem;
                            _itemData2.id = this._structureItems.length;
                            _itemData2.level = childLevel;
                            this._structureItems[_itemData2.id] = _itemData2;
                            this._parseItemData(_itemData2);
                        }
                }
            },
            {
                key: "_prepareWrapper",
                value: function _prepareWrapper() {
                    // console.log('1: _prepareWrapper');
                    this._wrapperNode.classList.add("structure-wrapper");
                    Structure._pathesWrapperNode = this._pathesWrapperNode = document.createElement(
                        "div"
                    );
                    this._pathesWrapperNode.id = "path-wrapper";
                    this._wrapperNode.innerHTML = "";
                    this._wrapperNode.appendChild(this._pathesWrapperNode);
                    return true;
                }
            },
            {
                key: "_renderStructure",
                value: function _renderStructure() {
                    var parentId =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : false;
                    var depth =
                        arguments.length > 1 && arguments[1] !== undefined
                            ? arguments[1]
                            : 0;

                    // console.log('2: _renderStructure');
                    var item = this._getItemById(parentId);
                    var childLevel = item.level + 1;
                    // if (this._parameters && this._parameters.renderRules && this._parameters.renderRules[item.type] && this._parameters.renderRules[item.type].showDepth)
                    var depthRule = this._getParameter(
                        "renderRules",
                        item.type,
                        "showDepth"
                    );
                    if (depthRule) depth = depthRule;
                    var destroyLevelId = childLevel + depth;
                    for (var i = childLevel; i <= childLevel + depth; i++) {
                        destroyLevelId = i + 1;
                        this._setActiveItem(item.id);
                        var level =
                            !this._level || !this._level[i]
                                ? this._renderLevel(i)
                                : this._level[i];
                        // level.node.innerHTML = '';
                        this._cleanLevel(level.id);
                        if (!item.submissive || item.submissive.length === 0) break;
                        level.items = item.submissive;
                        if (level.items.length === 1)
                            level.node.classList.add("center-items");
                        this._renderItems(level.items, i);
                        var rightSpace = level.node.appendChild(
                            document.createElement("div")
                        );
                        rightSpace.classList.add("right-space");
                        this._createActiveItemPath(item.id);
                        item = level.items[0];
                    }
                    this._destroyStructure(destroyLevelId);
                }
            },
            {
                key: "_renderLevel",
                value: function _renderLevel() {
                    var level =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : false;

                    if (!this._level) this._level = {};
                    if (typeof level !== "number" || isNaN((level = parseInt(level))))
                        throw new Error("Level " + arguments[0] + " is incorrect");
                    var targetLevel = (this._level[level] = {
                        id: level,
                        node: document.createElement("section"),
                        items: []
                    });

                    var levelWrapperNode = document.createElement("div");
                    levelWrapperNode.classList.add("level-wrapper");

                    targetLevel.node.addEventListener(
                        "scroll",
                        Structure.updateActiveItemPathes
                    );

                    targetLevel.leftButton = document.createElement("button");
                    targetLevel.leftButton.classList.add("structure-scroll-left");
                    targetLevel.leftButton.addEventListener("click", function(event) {
                        var scrollSection = this.parentNode.querySelector("section");
                        var scroll = scrollSection.scrollLeft - 340;
                        scrollSection.scroll(scroll, false);
                    });
                    levelWrapperNode.appendChild(targetLevel.leftButton);

                    levelWrapperNode.appendChild(targetLevel.node);

                    targetLevel.rightButton = document.createElement("button");
                    targetLevel.rightButton.classList.add("structure-scroll-right");
                    targetLevel.rightButton.addEventListener("click", function(event) {
                        var scrollSection = this.parentNode.querySelector("section");
                        var scroll = scrollSection.scrollLeft + 340;
                        scrollSection.scroll(scroll, false);
                    });
                    levelWrapperNode.appendChild(targetLevel.rightButton);

                    targetLevel.node.dataset.structureLevel = level;

                    this._wrapperNode.appendChild(levelWrapperNode);
                    return targetLevel;
                }
            },
            {
                key: "_cleanLevel",
                value: function _cleanLevel() {
                    var level =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : false;

                    this._level[level].node.scrollTo(0, 0);
                    this._level[level].node
                        .querySelectorAll(".item")
                        .forEach(function(item) {
                            item.parentNode.removeChild(item);
                        });
                    this._level[level].node
                        .querySelectorAll(".right-space")
                        .forEach(function(item) {
                            item.parentNode.removeChild(item);
                        });
                    this._level[level].node.className = "";
                    Structure._removeActiveItemPath(level);
                }
            },
            {
                key: "_getItemById",
                value: function _getItemById() {
                    var id =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : false;

                    if (!id)
                        return {
                            id: false,
                            level: -1,
                            submissive: this._structure
                        };
                    else if (!this._structureItems || !this._structureItems[id])
                        throw new Error("Item with ID: " + id + " not exist");
                    else return this._structureItems[id];
                }
            },
            {
                key: "_renderItems",
                value: function _renderItems() {
                    var items =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : [];
                    var level =
                        arguments.length > 1 && arguments[1] !== undefined
                            ? arguments[1]
                            : false;

                    for (var i in items) {
                        var item = items[i];
                        if (!level) level = item.level;
                        var itemNode = this._renderItem(item, level);
                        if (item.partners && item.partners.length > 0)
                            for (var j in item.partners) {
                                var partner = item.partners[j];
                                partner.order = j;
                                this._renderItem(partner, level);
                            }
                        if (item.assistants && item.assistants.length > 0) {
                            this._level[level].node.classList.add("extended-level");
                            for (var _j in item.assistants) {
                                var assistant = item.assistants[_j];
                                assistant.subLevel = true;
                                assistant.order = _j;
                                this._renderItem(assistant, level);
                            }
                        }
                        if (
                            this._level[level].node.classList.contains("extended-level") &&
                            !itemNode.classList.contains("sub-level")
                        ) {
                            var styleElem = itemNode.appendChild(
                                document.createElement("style")
                            );
                            var itemPathWidth = 0;
                            var prevItem = itemNode;
                            while ((prevItem = prevItem.previousSibling)) {
                                itemPathWidth = itemNode.offsetLeft - prevItem.offsetLeft;
                            }
                            styleElem.innerHTML =
                                '.structure-wrapper section.extended-level > .item[data-structure-item="' +
                                item.id +
                                '"]:before {width: ' +
                                itemPathWidth +
                                "px;left: calc(-" +
                                itemPathWidth +
                                "px + 50%);";
                        }
                    }
                }
            },
            {
                key: "_renderItem",
                value: function _renderItem() {
                    var item =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : {};
                    var level =
                        arguments.length > 1 && arguments[1] !== undefined
                            ? arguments[1]
                            : false;

                    if (level === false) level = item.level;
                    if (!this._level[level])
                        throw new Error("Level " + level + " is not available");
                    var itemNode = document.createElement("div");
                    itemNode.dataset.structureItem = item.id;
                    itemNode.classList.add("item");
                    if (item.type) itemNode.classList.add(item.type);
                    if (item.role) itemNode.classList.add(item.role);
                    if (item.partners && item.partners.length > 0)
                        itemNode.classList.add("partner");
                    if (item.subLevel) itemNode.classList.add("sub-level");

                    if (parseInt(item.order) === 0)
                        itemNode.classList.add("first-after-head");
                    // if (item.title) itemNode.innerHTML += `<div class="title">${item.title}</div>`;
                    // if (item.description) itemNode.innerHTML += `<div class="description">${item.description}</div>`;
                    if (item.roleTitle)
                        itemNode.innerHTML +=
                            '<div class="title">' +
                            item.roleTitle +
                            '</div><div class="description">' +
                            item.name +
                            "</div>";
                    else
                        itemNode.innerHTML += '<div class="title">' + item.name + "</div>";
                    var self = this;
                    if (item.submissive && item.submissive.length > 0) {
                        itemNode.style.cursor = "pointer";
                        itemNode.innerHTML += '<div class="state-button"></div>';

                        itemNode.addEventListener("click", function(event) {
                            if (!this.dataset.structureItem) return false;
                            var id = this.dataset.structureItem;
                            if (this.classList.contains("active")) {
                                var _level = parseInt(this.parentNode.dataset.structureLevel);
                                self._unsetActiveItems(_level);
                                Structure._removeActiveItemPath(_level);
                                self._destroyStructure(_level + 1);
                            } else {
                                self._setActiveItem(id);
                                self._renderStructure(id);
                                self._createActiveItemPath(id);
                            }
                            Structure.updateActiveItemPathes();
                        });
                    }
                    var itemModal = document.createElement("div");
                    itemModal.classList.add("modal-link");
                    itemModal.addEventListener("click", function(event) {
                        event.stopPropagation();
                        if (!this.parentNode.dataset.structureItem) return false;
                        var id = this.parentNode.dataset.structureItem;
                        self._showItemModal(id);
                    });
                    itemNode.appendChild(itemModal);
                    this._level[level].node.appendChild(itemNode);
                    return itemNode;
                }
            },
            {
                key: "_setActiveItem",
                value: function _setActiveItem() {
                    var id =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : false;

                    var item = this._getItemById(id);
                    this._unsetActiveItems(item.level);
                    var itemNode = document.querySelector(
                        '[data-structure-item="' + id + '"]'
                    );
                    if (!itemNode) return;
                    itemNode.classList.add("active");
                }
            },
            {
                key: "_unsetActiveItems",
                value: function _unsetActiveItems(level) {
                    var levelNode = document.querySelector(
                        '[data-structure-level="' + level + '"]'
                    );
                    if (!levelNode) return;
                    levelNode
                        .querySelectorAll("[data-structure-item]")
                        .forEach(this._unsetActiveItem);
                }
            },
            {
                key: "_unsetActiveItem",
                value: function _unsetActiveItem(element) {
                    element.classList.remove("active");
                }
            },
            {
                key: "_destroyStructure",
                value: function _destroyStructure() {
                    var level =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : 0;

                    var maxLevel = Object.values(this._level).length - 1;
                    for (var i = maxLevel; i >= level; i--) {
                        Structure._removeActiveItemPath(i);
                        if (!this._level[i]) continue;
                        var levelData = this._level[i];
                        levelData.node.parentNode.removeChild(levelData.node);
                        delete this._level[i];
                    }
                }
            },
            {
                key: "_createActiveItemPath",
                value: function _createActiveItemPath(id) {
                    var item = this._getItemById(id);
                    var itemNode = document.querySelector(
                        '[data-structure-item="' + id + '"]'
                    );
                    if (!itemNode) return;
                    var pathId = item.level;
                    Structure._removeActiveItemPath(pathId);
                    var path = document.createElement("div");
                    path.classList.add("active-path");
                    path.dataset.structurePath = pathId;
                    path.dataset.structurePathParentItem = item.id;
                    var levelNode = document.querySelector(
                        '[data-structure-level="' + pathId + '"]'
                    );
                    var parentLevelNode = document.querySelector(
                        '[data-structure-level="' + (pathId - 1) + '"]'
                    );
                    if (levelNode) {
                        levelNode.dataset.pathScrollEvent = pathId;
                        //levelNode.addEventListener('scroll', Structure.updateActiveItemPathes);
                    }
                    if (parentLevelNode) {
                        parentLevelNode.dataset.pathScrollEvent = pathId;
                        //parentLevelNode.addEventListener('scroll', Structure.updateActiveItemPathes);
                    }
                    this._pathesWrapperNode.appendChild(path);
                    // Structure.calculatePathPositionHandler.call(path);
                    Structure.updateActiveItemPathes(); //.call(path);
                }
            },
            {
                key: "_createActiveSubItemPath",
                value: function _createActiveSubItemPath(id) {
                    var item = this._getItemById(id);
                    var itemNode = document.querySelector(
                        '[data-structure-item="' + id + '"]'
                    );
                    if (!itemNode) return;
                    var pathId = item.level;
                    this._removeActiveSubItemPath(pathId);
                    var path = document.createElement("div");
                    path.classList.add("active-path");
                    path.dataset.structureSubPath = pathId;
                    path.dataset.structureSubPathTargetItem = item.id;
                    var levelNode = document.querySelector(
                        '[data-structure-level="' + pathId + '"]'
                    );
                    // let parentLevelNode = document.querySelector(`[data-structure-level="${pathId - 1}"]`);
                    if (levelNode) {
                        levelNode.dataset.subPathScrollEvent = pathId;
                        levelNode.addEventListener(
                            "scroll",
                            Structure.updateActiveItemPathes
                        );
                    }
                    this._pathesWrapperNode.appendChild(path);
                    // Structure.calculatePathPositionHandler.call(path);
                    Structure.updateActiveItemPathes(); //.call(path);
                }
            },
            {
                key: "_removeActiveSubItemPath",
                value: function _removeActiveSubItemPath(level) {
                    this._pathesWrapperNode
                        .querySelectorAll('[data-structure-sub-path="' + level + '"]')
                        .forEach(function(pathNode) {
                            pathNode.parentNode.removeChild(pathNode);
                        });
                }
            },
            {
                key: "_getParameter",
                value: function _getParameter() {
                    var parentParameter = this._parameters;

                    for (
                        var _len = arguments.length, path = Array(_len), _key = 0;
                        _key < _len;
                        _key++
                    ) {
                        path[_key] = arguments[_key];
                    }

                    while (parentParameter[path[0]]) {
                        if (path.length === 1) return parentParameter[path[0]];
                        parentParameter = parentParameter[path[0]];
                        path.shift();
                    }
                    return false;
                }
            },
            {
                key: "_showItemModal",
                value: function _showItemModal() {
                    var id =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : false;

                    document
                        .querySelectorAll("[data-structure-modal]")
                        .forEach(function(modal) {
                            modal.parentNode.removeChild(modal);
                        });
                    if (!id) throw new Error("Empty item ID");
                    var item = this._getItemById(id);
                    var modal = document.createElement("modal");
                    modal.addEventListener("click", Structure.closeModals);
                    modal.classList.add("structure-modal-wrapper");
                    modal.dataset.structureModal = id;
                    modal.innerHTML = this._genModalContent(item);
                    modal
                        .querySelector(".structure-modal-content")
                        .addEventListener("click", function(e) {
                            return e.stopPropagation();
                        });
                    modal
                        .querySelectorAll("[data-structure-modal-link]")
                        .forEach(this._prepareItemModalLink, this);
                    document.body.appendChild(modal);
                    // return this._loadModalData(id);
                }
            },
            {
                key: "_prepareItemModalLink",
                value: function _prepareItemModalLink(link) {
                    var self = this;
                    link.addEventListener("click", function(event) {
                        self._showItemModal(this.dataset.structureModalLink);
                    });
                }
            },
            {
                key: "_loadModalData",
                value: function _loadModalData() {
                    var id =
                        arguments.length > 0 && arguments[0] !== undefined
                            ? arguments[0]
                            : false;

                    var item = this._getItemById(id);
                    var data = {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            type: item.type,
                            id: item.id
                        })
                    };
                    return fetch(this._parameters.modalDataUrl, data)
                        .then(function(response) {
                            return response.json();
                        })
                        .then(
                            function(response) {
                                if (!response || !response.data)
                                    throw new Error("Modal data empty");
                                var modal = document.querySelector(
                                    '[data-structure-modal="' + item.id + '"]'
                                );
                                if (!modal) return;
                                Object.assign(response.data, item, response.data);
                                modal.innerHTML = this._genModalContent(response.data);
                            }.bind(this)
                        );
                }
            },
            {
                key: "_genModalContent",
                value: function _genModalContent(item) {
                    if (!item.type) throw new Error("Incorrect item type");

                    var source =
                        '<div class="structure-modal-content">' +
                        genHeader(item) +
                        '<div class="modal-body">';

                    switch (item.type) {
                        case "profile":
                            if (item.roleTitle)
                                source += '<h2 class="title">' + item.roleTitle + "</h2>";
                            if (
                                item.role === "headOfDepartment" ||
                                item.role === "headOfDivision"
                            ) {
                                var structure = item.parentItem;
                                source +=
                                    '<a class="structure-link" data-structure-modal-link="' +
                                    structure.id +
                                    '">' +
                                    structure.name +
                                    "</a>";
                            }
                            source +=
                                '<hr><div class="sub-title">\u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F</div>';
                            if (item.partners && item.partners.length > 0) {
                                source +=
                                    '<div class="info-line"><strong>\u0410\u0441\u0438\u0441\u0442\u0435\u043D\u0442: </strong>' +
                                    item.partners[0].name +
                                    "</div>";
                            }
                            source += genProfileContacts(item);
                            break;
                        case "department":
                            source +=
                                genStructureManagement(item) +
                                '<hr><div class="sub-title">\u041F\u043E\u0434\u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u044F</div>';
                            if (item.submissive && item.submissive[0])
                                source +=
                                    '<div class="department-structure">' +
                                    genDepartamentStructure(item.submissive[0]) +
                                    "</div>";
                            break;
                        case "division":
                            source +=
                                genStructureManagement(item) +
                                '<hr><div class="sub-title">\u0421\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0438 \u043E\u0442\u0434\u0435\u043B\u0430</div>';
                            if (item.submissive && item.submissive[0])
                                source +=
                                    '<div class="division-structure">' +
                                    genDivisionStructure(item.submissive[0]) +
                                    "</div>";
                            break;
                        default:
                            source += "Unsupported type";
                            break;
                    }

                    source +=
                        '</div><button class="structure-modal-close" onclick="Structure.closeModals();">\xD7</button></div>';

                    function genHeader() {
                        var item =
                            arguments.length > 0 && arguments[0] !== undefined
                                ? arguments[0]
                                : {};

                        var source = "";
                        if (!item) return source;
                        source += '<div class="modal-header">';
                        if (item.image)
                            source +=
                                '<div class="image"><img src="' + item.image + '"></div>';
                        else
                            source +=
                                '<div class="image"><img src="http://ponomarevlad.ru/assets/img/pic.jpeg"></div>';
                        source += '<div class="right-section">';
                        if (item.name) source += '<h2 class="title">' + item.name + "</h2>";
                        if (item.birthday)
                            source +=
                                '<div class="birthday">\u0414\u0430\u0442\u0430 \u0440\u043E\u0436\u0434\u0435\u043D\u0438\u044F: ' +
                                item.birthday +
                                "</div>";
                        source += "</div></div>";
                        return source;
                    }

                    function genStructureManagement() {
                        var item =
                            arguments.length > 0 && arguments[0] !== undefined
                                ? arguments[0]
                                : {};

                        var source = "";
                        if (!item.submissive || item.submissive.length === 0) return source;
                        for (var i in item.submissive) {
                            source += genManager(item.submissive[i]);
                        }
                        return source;
                    }

                    function genManager() {
                        var manager =
                            arguments.length > 0 && arguments[0] !== undefined
                                ? arguments[0]
                                : {};

                        source = "";
                        source += '<div class="manager-item">';
                        if (manager.image)
                            source +=
                                '<div class="image"><img src="' + manager.image + '"></div>';
                        else
                            source +=
                                '<div class="image"><img src="http://ponomarevlad.ru/assets/img/pic.jpeg"></div>';
                        source += '<div class="info-section">';
                        if (manager.roleTitle)
                            source += '<div class="title">' + manager.roleTitle + "</div>";
                        if (manager.name)
                            source += '<div class="sub-title">' + manager.name + "</div>";
                        source += genProfileContacts(manager) + "</div></div>";
                        if (manager.partners && manager.partners.length > 0) {
                            for (var i in manager.partners) {
                                source += genManager(manager.partners[i]);
                            }
                        }
                        return source;
                    }

                    function genProfileContacts() {
                        var item =
                            arguments.length > 0 && arguments[0] !== undefined
                                ? arguments[0]
                                : {};

                        var source = "";
                        if (item.phoneWork)
                            source +=
                                '<div class="info-line"><strong>\u0420\u0430\u0431\u043E\u0447\u0438\u0439 \u0442\u0435\u043B\u0435\u0444\u043E\u043D:</strong>' +
                                item.phoneWork +
                                "</div>";
                        if (item.phone)
                            source +=
                                '<div class="info-line"><strong>\u0422\u0435\u043B\u0435\u0444\u043E\u043D:</strong>' +
                                item.phone +
                                "</div>";
                        if (item.email)
                            source +=
                                '<div class="info-line"><strong>Email:</strong>' +
                                item.email +
                                "</div>";
                        return source;
                    }

                    function genDepartamentStructure() {
                        var item =
                            arguments.length > 0 && arguments[0] !== undefined
                                ? arguments[0]
                                : {};

                        var source = "";
                        for (var i in item.submissive) {
                            var structureItem = item.submissive[i];
                            if (!structureItem) continue;
                            source +=
                                '<div class="structure-item"><h3>' +
                                structureItem.name +
                                "</h3>";
                            if (structureItem.submissive && structureItem.submissive[0]) {
                                var structureManager = structureItem.submissive[0];
                                source +=
                                    '<div class="info"><hr><div class="role">' +
                                    structureManager.roleTitle +
                                    '</div>\n                    <div class="name">' +
                                    structureManager.name +
                                    "</div></div>";
                            }
                            source += "</div>";
                        }
                        return source;
                    }

                    function genDivisionStructure() {
                        var item =
                            arguments.length > 0 && arguments[0] !== undefined
                                ? arguments[0]
                                : {};

                        var source = "";
                        if (item.submissive && item.submissive.length > 0) {
                            source +=
                                '<div class="structure-header"><div>ФИО</div><div>Рабочий телефон</div><div>Телефон</div><div>Email</div></div>';
                            for (var i in item.submissive) {
                                var positionItem = item.submissive[i];
                                if (!positionItem) continue;
                                source += '<div class="division-position">';
                                source +=
                                    "<div>" +
                                    (positionItem.name ? positionItem.name : "") +
                                    "<br><span>" +
                                    positionItem.roleTitle +
                                    "</span></div>";
                                source +=
                                    "<div>" +
                                    (positionItem.phoneWork ? positionItem.phoneWork : "") +
                                    "</div>";
                                source +=
                                    "<div>" +
                                    (positionItem.phone ? positionItem.phone : "") +
                                    "</div>";
                                source +=
                                    "<div>" +
                                    (positionItem.email ? positionItem.email : "") +
                                    "</div>";
                                source += "</div>";
                            }
                        }
                        return source;
                    }

                    return source;
                }
            }
        ],
        [
            {
                key: "closeModals",
                value: function closeModals() {
                    document
                        .querySelectorAll("[data-structure-modal]")
                        .forEach(function(modal) {
                            modal.parentNode.removeChild(modal);
                        });
                }
            },
            {
                key: "calculatePathPositionHandler",
                value: function calculatePathPositionHandler(event) {
                    var pathNode = false;
                    if (this.dataset.structurePathParentItem) {
                        pathNode = this;
                    } else {
                        pathNode = document.querySelector(
                            '[data-structure-path="' + this.dataset.pathScrollEvent + '"]'
                        );
                    }
                    var itemId = pathNode.dataset.structurePathParentItem;
                    if (!itemId) return Structure._removeActiveItemPath(itemId);
                    var itemNode = document.querySelector(
                        '[data-structure-item="' + itemId + '"]'
                    );
                    if (!itemNode) return Structure._removeActiveItemPath(itemId);
                    var targetLevelId =
                        parseInt(itemNode.parentNode.dataset.structureLevel) + 1;
                    if (!targetLevelId || isNaN(targetLevelId))
                        return Structure._removeActiveItemPath(itemId);
                    var targetLevelNode = document.querySelector(
                        '[data-structure-level="' + targetLevelId + '"]'
                    );
                    if (!targetLevelNode) return Structure._removeActiveItemPath(itemId);
                    var targetNode = targetLevelNode.querySelector(
                        ".active[data-structure-item]"
                    );
                    if (!targetNode)
                        targetNode = targetLevelNode.querySelector("[data-structure-item]");
                    if (!targetNode) return Structure._removeActiveItemPath(itemId);
                    // let levelNode = itemNode.parentNode;
                    var position = {
                        offsetTop: targetNode.parentNode.parentNode.offsetTop,
                        offsetLeft:
                        itemNode.offsetLeft - itemNode.parentNode.scrollLeft + 150
                    };
                    pathNode.style.opacity = 1;
                    if (
                        targetNode.classList.contains("partner") ||
                        targetNode.classList.contains("active")
                    ) {
                        position.targetLeft =
                            targetNode.offsetLeft - targetNode.parentNode.scrollLeft + 150;
                    } else {
                        var levelItems = targetLevelNode.querySelectorAll(
                            "[data-structure-item]"
                        );
                        if (levelItems.length > 1) {
                            var leftLevelItemOffset =
                                levelItems[0].offsetLeft -
                                levelItems[0].parentNode.scrollLeft +
                                150;
                            var rightLevelItemOffset =
                                levelItems[levelItems.length - 1].offsetLeft -
                                levelItems[levelItems.length - 1].parentNode.scrollLeft +
                                150;
                            if (
                                position.offsetLeft >= leftLevelItemOffset &&
                                position.offsetLeft <= rightLevelItemOffset
                            ) {
                                pathNode.style.opacity = 0;
                            } else if (position.offsetLeft < leftLevelItemOffset) {
                                position.targetLeft = leftLevelItemOffset;
                            } else {
                                position.targetLeft = rightLevelItemOffset;
                            }
                        } else position.targetLeft = document.body.clientWidth / 2;
                    }
                    position.pathLeft =
                        position.offsetLeft > position.targetLeft
                            ? position.targetLeft
                            : position.offsetLeft;
                    position.pathWidth =
                        position.offsetLeft > position.targetLeft
                            ? position.offsetLeft - position.targetLeft
                            : position.targetLeft - position.offsetLeft;
                    pathNode.style.top = position.offsetTop + "px";
                    pathNode.style.left = position.pathLeft + "px";
                    pathNode.style.width = position.pathWidth + "px";
                }
            },
            {
                key: "calculateSubPathPositionHandler",
                value: function calculateSubPathPositionHandler(event) {
                    var pathNode = document.querySelector(
                        '[data-structure-sub-path="' +
                        this.dataset.subPathScrollEvent +
                        '"]'
                    );
                    var itemId = pathNode.dataset.structurePathTargetItem;
                    if (!itemId) return;
                    var itemNode = document.querySelector(
                        '[data-structure-item="' + itemId + '"]'
                    );
                    if (!itemNode) return;
                    var targetLevelId = parseInt(
                        itemNode.parentNode.dataset.structureLevel
                    );
                    if (!targetLevelId || isNaN(targetLevelId)) return;
                    var targetLevelNode = document.querySelector(
                        '[data-structure-level="' + targetLevelId + '"]'
                    );
                    if (!targetLevelNode) return;
                    var targetNode = targetLevelNode.querySelector(
                        "[data-structure-item]"
                    );
                    if (!targetNode) return;

                    var position = {
                        offsetTop: targetNode.offsetTop - 72,
                        offsetLeft:
                        itemNode.offsetLeft - itemNode.parentNode.scrollLeft + 150
                    };
                    if (
                        targetNode.classList.contains("partner") ||
                        targetNode.classList.contains("active")
                    ) {
                        position.targetLeft =
                            targetNode.offsetLeft - targetNode.parentNode.scrollLeft + 150;
                        //else position.targetLeft = document.body.clientWidth / 2;
                        position.pathLeft =
                            position.offsetLeft > position.targetLeft
                                ? position.targetLeft
                                : position.offsetLeft;
                        position.pathWidth =
                            position.offsetLeft > position.targetLeft
                                ? position.offsetLeft - position.targetLeft
                                : position.targetLeft - position.offsetLeft;
                    }
                    pathNode.style.top = position.offsetTop + "px";
                    pathNode.style.left = position.pathLeft + "px";
                    pathNode.style.width = position.pathWidth + "px";
                }
            },
            {
                key: "calculateLevelScrollButtons",
                value: function calculateLevelScrollButtons() {}
            },
            {
                key: "updateActiveItemPathes",
                value: function updateActiveItemPathes() {
                    document
                        .querySelectorAll("[data-structure-path]")
                        .forEach(function(path) {
                            Structure.calculatePathPositionHandler.call(path);
                        });
                    document
                        .querySelectorAll("[data-structure-sub-path]")
                        .forEach(function(path) {
                            Structure.calculateSubPathPositionHandler.call(path);
                        });

                    document
                        .querySelectorAll("[data-structure-level]")
                        .forEach(function(levelNode) {
                            if (levelNode.scrollWidth > document.body.clientWidth) {
                                if (levelNode.scrollLeft < 100)
                                    Structure._levelScrollButton(levelNode, "left", false);
                                else Structure._levelScrollButton(levelNode, "left", true);
                                if (
                                    levelNode.scrollWidth -
                                    levelNode.scrollLeft -
                                    document.body.clientWidth <
                                    100
                                )
                                    Structure._levelScrollButton(levelNode, "right", false);
                                else Structure._levelScrollButton(levelNode, "right", true);
                            } else {
                                Structure._levelScrollButton(levelNode, "left", false);
                                Structure._levelScrollButton(levelNode, "right", false);
                            }
                        });
                }
            },
            {
                key: "_levelScrollButton",
                value: function _levelScrollButton(levelNode, side) {
                    var state =
                        arguments.length > 2 && arguments[2] !== undefined
                            ? arguments[2]
                            : true;

                    switch (side) {
                        case "left":
                            levelNode.parentNode.querySelector(
                                ".structure-scroll-left"
                            ).style.display = state ? "block" : "none";
                            break;
                        case "right":
                            levelNode.parentNode.querySelector(
                                ".structure-scroll-right"
                            ).style.display = state ? "block" : "none";
                            break;
                    }
                }
            },
            {
                key: "_removeActiveItemPath",
                value: function _removeActiveItemPath(level) {
                    Structure._pathesWrapperNode
                        .querySelectorAll('[data-structure-path="' + level + '"]')
                        .forEach(function(pathNode) {
                            pathNode.parentNode.removeChild(pathNode);
                        });
                }
            }
        ]
    );

    return Structure;
})();

